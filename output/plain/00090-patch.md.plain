

EXPERIMENTATION WITH CACHING ISEQ TO REDUCE OVERHEAD OF EVAL


-   Make iseq eval consistent with Kernel eval [@ruby-iseq-eval-patch]
    is an attempt to revive an older patch to allow for evaluate an
    instruction sequence against an arbitrary binding. More details of
    this patch are below. The patch is based on draft work from Nobu
    [@nobu-eval-with-patch] a few years ago on Ruby Feature 12093.

Ruby allows passing a binding to Kernel.eval, to arbitratily execute
strings as ruby code in the context of a particular binding. Ruby also
has the ability to precompile strings of Ruby code, but it does not have
the ability to execute this within the context of a particular binding,
it will be evaluated against the binding that it was compiled for.

This patch changes the call signature of eval, adding an optional single
argument, where none are currently accepted. This doesn’t change the
contract with existing callers, so all tests pass. However, there is a
major flaw in the design.


Why the patch doesn’t work

Ultimately, this patch has been rejected for good reason, but I figured
I’d explain what the obstacle is in case someone can figure out a clever
solution!

Take for example this test case:

    def bind
      a = 1
      b = 2
      binding
    end

    iseq = RubyVM::InstructionSequence.compile("a + b")
    val = iseq.eval(bind)

We will get an error!

    NameError: undefined local variable or method `a' 

This is because compiled source may contain undefined references which
may be assumed to be method calls or local variables. In the ruby
instruction sequence, it is assumed to be a method call:

    == disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(1,5)> (catch: FALSE)
    0000 putself                                                          (   1)[Li]
    0001 opt_send_without_block       <callinfo!mid:a, argc:0, FCALL|VCALL|ARGS_SIMPLE>, <callcache>
    0004 putself
    0005 opt_send_without_block       <callinfo!mid:b, argc:0, FCALL|VCALL|ARGS_SIMPLE>, <callcache>
    0008 opt_plus                     <callinfo!mid:+, argc:1, ARGS_SIMPLE>, <callcache>
    0011 leave

In the other test case, where the variables are wrapped in a struct:

    obj = Struct.new(:a, :b).new(1, 2)
    bind = obj.instance_eval {binding}
    iseq = RubyVM::InstructionSequence.compile("a + b")
    val = iseq.eval(bind)

They are accessible because the struct is able receive the call, where
the local variables in the binding object above wouldn’t.

If a way can be devised for local variables to be added to the binding
as above but in a more elegant / transparent way, this approach could
regain its efficacy.


Patch Description

The rejected patch updated the signature and docs to:

Note that this is based on the signature of the Kernel.eval method:

Where the:

-   First argument string to Kernel.eval is not necessary in the iseq
    version, as it is implied as part of self that was used to compile
    the iseq.
-   Second argument, binding, is optional. This becomes the first
    argument of iseq.eval, as reasoned above
-   Third optional argument, filename, is specified when an iseq is
    created so is not needed
-   Fourth optional argument, lineno, is also specified when an iseq is
    created so is not needed

To implement this new call signature, the definition of iseqw_eval is
updated to check the number of arguments.

If no arguments are specified, it does what it always did. If an
argument is specified, it scans for the argument and uses it as the
binding, for a new VM method rb_iseq_eval_in_scope :

This definition is based on the approach used under the hood for
Kernel.eval, when it calls eval_string_with_scope:


